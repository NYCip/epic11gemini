name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Tests and Build
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:ci
    
    - name: Build frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next

  # Backend Python Tests
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [agno_service, control_panel_backend, mcp_server, donna_protection_service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run Python tests
      run: |
        cd ${{ matrix.service }}
        python -m pytest --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start test environment
      run: |
        echo "POSTGRES_PASSWORD=test_password" > .env.test
        echo "REDIS_PASSWORD=test_redis" >> .env.test
        echo "JWT_SECRET=test_jwt_secret" >> .env.test
        docker-compose -f docker-compose.test.yml up -d
    
    - name: Wait for services
      run: |
        sleep 30
        docker-compose -f docker-compose.test.yml ps
    
    - name: Run integration tests
      run: |
        pip install pytest pytest-asyncio httpx
        python -m pytest tests/ -v
    
    - name: Cleanup test environment
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: github.ref == 'refs/heads/master'
    
    strategy:
      matrix:
        service: [agno_service, control_panel_backend, frontend, mcp_server, donna_protection_service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max