name: CD Pipeline

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event.workflow_run.conclusion == 'success'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
    
    - name: Deploy to staging
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/epic11gemini
          git pull origin master
          docker-compose pull
          docker-compose up -d --force-recreate
          docker system prune -f
        EOF
    
    - name: Health check staging
      run: |
        sleep 60
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
    
    - name: Run smoke tests
      run: |
        pip install pytest httpx
        EPIC_BASE_URL=${{ secrets.STAGING_URL }} python -m pytest tests/smoke/ -v

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
    
    - name: Deploy to production
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/epic11gemini
          git fetch --tags
          git checkout ${{ github.ref_name }}
          docker-compose pull
          docker-compose up -d --force-recreate
          docker system prune -f
        EOF
    
    - name: Health check production
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
    
    - name: Run production smoke tests
      run: |
        pip install pytest httpx
        EPIC_BASE_URL=${{ secrets.PRODUCTION_URL }} python -m pytest tests/smoke/ -v
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Rollback production
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/epic11gemini
          git log --oneline -10
          read -p "Enter commit hash to rollback to: " commit_hash
          git checkout $commit_hash
          docker-compose up -d --force-recreate
        EOF